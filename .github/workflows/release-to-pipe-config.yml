on:
    workflow_call:
      inputs:
        is-prerelease:
            description: 'Is this a pre-release?'
            required: true
            type: boolean
            default: true
        release-version:
            description: 'Release version'
            required: true
            type: string
            default: 'v0.0.1'
        release-html-url:
            description: 'Release HTML URL'
            required: true
            type: string
            default: ''

jobs:
  deploy:
    name: Deploy Pipeline Configuration to ShotGrid
    runs-on: ubuntu-latest

    steps:
      - name: Variable Fixtures
        id: variable_fixtures
        run: |
          repository=${{ github.repository }}
          repo_name=${repository#*/}
          authorization_header="Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
          download_url=https://api.github.com/repos/${{ github.repository }}/zipball/${{ inputs.release-version }}
          zip_file_name="$repo_name-${{ inputs.release-version }}.zip"
          zip_file_path=${{ github.workspace }}/$zip_file_name
          if ${{ inputs.is-prerelease }}; then
            config_name_prefix=${{ github.ref_name }}
          else
            config_name_prefix="primary"
          fi
          config_name="$config_name_prefix-${{ inputs.release-version }}"
          echo "Repository Name: $repo_name"
          echo "Authorization Header: $authorization_header"
          echo "Download URL: $download_url"
          echo "Zip File Name: $zip_file_name"
          echo "Zip File Path: $zip_file_path"
          echo "Config Name: $config_name"
          echo "authorization_header=$authorization_header" >> $GITHUB_OUTPUT
          echo "download_url=$download_url" >> $GITHUB_OUTPUT
          echo "zip_file_name=$zip_file_name" >> $GITHUB_OUTPUT
          echo "zip_file_path=$zip_file_path" >> $GITHUB_OUTPUT
          echo "config_name=$config_name" >> $GITHUB_OUTPUT

      - name: Download Zip File from Release
        run: curl -H "${{ steps.variable_fixtures.outputs.authorization_header }}" -L "${{ steps.variable_fixtures.outputs.download_url }}" > ${{ steps.variable_fixtures.outputs.zip_file_name }}

      - name: Checkout ci-cd-workflows repo to ci-cd-workflows folder
        uses: actions/checkout@v3
        with:
          repository: 'Falcons-Creative-Group/ci-cd-workflows'
          path: ci-cd-workflows

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9  # Adjust the version to match your requirements

      - name: Install ShotGrid Python API
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/shotgunsoftware/python-api.git

      - name: Create SG Pipeline Config and upload zip file
        run: python pipeline_config_uploader.py
        working-directory: ${{ github.workspace }}/ci-cd-workflows
        env:
          SG_BASE_URL: ${{ vars.SG_BASE_URL }}
          SG_SCRIPT_NAME: ${{ vars.SG_SCRIPT_NAME }}
          SG_SCRIPT_KEY: ${{ secrets.sg-api-key }}
          CONFIG_NAME: ${{ steps.variable_fixtures.outputs.config_name }}
          CONFIG_DESCRIPTION: ${{ inputs.release-html-url }}
          ZIP_FILE_PATH: ${{ steps.variable_fixtures.outputs.zip_file_path }}
          SG_DISABLED_USER_ID: ${{ vars.SG_DISABLED_USER_ID }}